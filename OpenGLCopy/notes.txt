29 May 2023
I decided to get back into C++ 3D tutorials. Let's start again with the tinyrenderer to copy OpenGL's 3D library.
I managed to follow the first introductory tutorial and made an image output of a line in C++!

9 June 2023
Today I spent time looking through the header file and implementations of the "tgaimage" which is used in generating
a simple line and outputting to a tga file. This was mostly to brush up on C++ again. I also set up my Personal Access
Token for my Github repository.

13 June 2023
1. Bresenham's Line Drawing Algorithm
    1.1 Xiaolin Wu's line algorithm -> fast antialiasing
2. gprof -> benchmark C/C++ function calls
3. Floating point division optimization -> always try to do integer addition/multiplication, way faster!
4. Don't perform branches inside loops (crazy performance difference!)
    4.1 Most compilers nowadays are smart enough to do what is called "loop unhoisting"

14 June 2023
1. When an "->" is used to access an object's variables/methods, this is when we are
using a pointer for the object. It is shorthand for "de-reference the pointer and access its values".
2. Wavefront obj format: vertices and faces of a model

19 June 2023
1. Rasterizing triangles: find the bounds, iterate through the points, if it lies within the bounds,
render the pixel.
    1.1 Filling a triangle is much more complicated than drawing the bounds of a triangle
2. Barycentric coordinates: describe points within a triangle
    2.1 Any point within the triangle is represented by three weights (u, v, w) which satisfy the following:
        1.) The weights are non-negative
        2.) The weights sum up to 1
    2.2 They indicate how much of the triangle's area is covered by each vertex
    2.3 In summary: they provide a convenient mathematical framework for representing points within triangles

21 June 2023
1. You can overload operators in C++. This means you define exactly how an operator is used with objects.
    1.1 In our example, the Vec3f defines the ^ operator to perform the following arithmetic: y*v.z-z*v.y, z*v.x-x*v.z, x*v.y-y*v.x (cross product)
2. Basic lighting can be calculated by defining a light vector, finding the normal of every triangle (and normalizing it), and
taking the scalar (dot) product of the light vector with the triangle's normal. This is the intensity level which we can scale our triangles' colors by.
In short, if the light is perpendicular to the triangle, it is at maximum intensity. If they are parallel, the intensity is 0.
TODO: figure out why all the triangles aren't being rendered.