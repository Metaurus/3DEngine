23 October 2022
This will be my attempt at creating a 3D engine in C++. These notes will document the entire learning process as well as all faults made during my work on this project.
Why C++? It has the speed and low-level capabilities of C, but with the added benefit of being object-oriented, perfect for a game engine. C++ uses the GCC compiler just
like C, but requires the additional flag of -lstdc++ (link standard C++) to compile properly.

Goals for this project:
-Use minimal amounts of C++ libraries, as building the engine from scratch will be more educational
-Be able to successfully display 3D shapes on the screen and build complex objects from them
    -Perhaps even be able to import 3D models
-Be able to move the camera around, to look at the 3D shapes from different angles
-Be able to develop a simplistic 3D game with this engine

These goals as they stand might be simplistic and are subject to change as I learn more about C++ and engines in general.
_________________________________________________________________________________________________________________________________________________________________________________________________

24 October 2022
We will need access to the Windows operating system API which can be found in <Windows.h>. I followed a tutorial to use the Windows API to create a window where the engine
can be run (https://www.youtube.com/watch?v=ssGka-bSTvQ). This video unfortunately wasn't very good at explaining what was happening but provided decent code for my purpose.
In addition, C/C++ compiles in a very annoying manner as every .cpp file needs to be individually compiled, and there's no way I'm writing 500 files in the command line every time I
want to compile the program. This requires the usage of a MAKE file, but that's a problem for next time (I'm starting to regret using C++, though it is a cool language).

From Reddit, I also found this Github page (https://github.com/ssloy/tinyrenderer/wiki) that provides quite good explanations on basic 3D rendering without library usage. It will be a good
basis for continuing this project.

Coding notes:
-Need 3 methods for a window
    -init (creates and initializes)
    -broadcast (updates)
    -release (destroys and exits)

TODO:
-Delve deeper into Win32 API that was used in the creation of a window (understand what it means)
-Create a MAKE file to be able to compile the program
-Start going through the tinyrenderer tutorial
_________________________________________________________________________________________________________________________________________________________________________________________________

31 October 2022
I've decided that before I go into fully fledged 3D rendering, I should follow in the steps of history and learn graphical processing chronologically. This means that I should start 
with creating a ray-casted engine similar to Doom or Wolfenstein 3D. For this example I will be following a "tinyrenderer" tutorial that can be found here https://github.com/ssloy/tinyraycaster/wiki/Part-0:-getting-started.


Today I just created a program that creates a 2D map as a .ppm image and is able to fill that image with rectangles to act as walls for our level. In addition, I created player coordinates and 
drew a corresponding square on the map to represent the player. So far I only have one .cpp file to compile, so there is no need for a MAKE file just yet.

Coding notes:
    -size_t is an interesting datatype. It takes the size of whatever variable is assigned to it and allocates the corresponding memory. It is useful for cross-platform compatability.
    -A 2D array can be represented in 1D by changing [x][y] coordinates to [x + y * width]
    -8-bit RGBA values can be packed into one 32-bit number in the reverse order (for some reason) -> ABGR
    -A map for a raycasting level is represented with an array to mark where a wall should be placed
    -ofstream (Output File Stream I'm guessing?) is used to generate a file and store it on the disk

TODO:
-Continue following the tinyrenderer tutorial
-Read more about how vectors and other unfamiliar C++ datastructures work
_________________________________________________________________________________________________________________________________________________________________________________________________