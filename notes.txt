23 October 2022
This will be my attempt at creating a 3D engine in C++. These notes will document the entire learning process as well as all faults made during my work on this project.
Why C++? It has the speed and low-level capabilities of C, but with the added benefit of being object-oriented, perfect for a game engine. C++ uses the GCC compiler just
like C, but requires the additional flag of -lstdc++ (link standard C++) to compile properly.

Goals for this project:
-Use minimal amounts of C++ libraries, as building the engine from scratch will be more educational
-Be able to successfully display 3D shapes on the screen and build complex objects from them
    -Perhaps even be able to import 3D models
-Be able to move the camera around, to look at the 3D shapes from different angles
-Be able to develop a simplistic 3D game with this engine

These goals as they stand might be simplistic and are subject to change as I learn more about C++ and engines in general.
_________________________________________________________________________________________________________________________________________________________________________________________________

24 October 2022
We will need access to the Windows operating system API which can be found in <Windows.h>. I followed a tutorial to use the Windows API to create a window where the engine
can be run (https://www.youtube.com/watch?v=ssGka-bSTvQ). This video unfortunately wasn't very good at explaining what was happening but provided decent code for my purpose.
In addition, C/C++ compiles in a very annoying manner as every .cpp file needs to be individually compiled, and there's no way I'm writing 500 files in the command line every time I
want to compile the program. This requires the usage of a MAKE file, but that's a problem for next time (I'm starting to regret using C++, though it is a cool language).

From Reddit, I also found this Github page (https://github.com/ssloy/tinyrenderer/wiki) that provides quite good explanations on basic 3D rendering without library usage. It will be a good
basis for continuing this project.

Coding notes:
-Need 3 methods for a window
    -init (creates and initializes)
    -broadcast (updates)
    -release (destroys and exits)

TODO:
-Delve deeper into Win32 API that was used in the creation of a window (understand what it means)
-Create a MAKE file to be able to compile the program
-Start going through the tinyrenderer tutorial
_________________________________________________________________________________________________________________________________________________________________________________________________

31 October 2022
I've decided that before I go into fully fledged 3D rendering, I should follow in the steps of history and learn graphical processing chronologically. This means that I should start 
with creating a ray-casted engine similar to Doom or Wolfenstein 3D. For this example I will be following a "tinyrenderer" tutorial that can be found here https://github.com/ssloy/tinyraycaster/wiki/Part-0:-getting-started.


Today I just created a program that creates a 2D map as a .ppm image and is able to fill that image with rectangles to act as walls for our level. In addition, I created player coordinates and 
drew a corresponding square on the map to represent the player. So far I only have one .cpp file to compile, so there is no need for a MAKE file just yet.

Coding notes:
    -size_t is an interesting datatype. It takes the size of whatever variable is assigned to it and allocates the corresponding memory. It is useful for cross-platform compatability.
    -A 2D array can be represented in 1D by changing [x][y] coordinates to [x + y * width]
    -8-bit RGBA values can be packed into one 32-bit number in the reverse order (for some reason) -> ABGR
    -A map for a raycasting level is represented with an array to mark where a wall should be placed
    -ofstream (Output File Stream I'm guessing?) is used to generate a file and store it on the disk

TODO:
-Continue following the tinyrenderer tutorial
-Read more about how vectors and other unfamiliar C++ datastructures work
_________________________________________________________________________________________________________________________________________________________________________________________________

1 November 2022
I've finally learned how basic 3D raytracing works! This is the methodology that made Wolfenstein 3D and Doom possible. By using the angle from the X-axis (in radians), I am able to draw a ray by
continuosly incrementing a constant to scale the coordinate adjustment until a wall is reached (based on the 2D map). Once a wall is reached, we draw a column who's height is the height of the window
scaled by our ray constant. The more iterations the constant has to go through before it reaches a wall, the further the wall has to be, therefore the drawn column will be shorter. This is the magic
of depth! So far the engine draws a frame, saves it to a .ppm image file and spams my code folder with a bunch of crap. Once the tutorial is finished, I will need render one frame at a time, and
commit it to memory rather than the disk so that the frames are volatile. One is rendered, then it's gone. This will have to be incorporated in some kind of window that can be generously provided
by the Win32 (or Win64?) api. 

TODO:
-Render the raycasting in a window and don't save every frame to the disk
-Be able to move around
-Figure out how I can texture the walls
-Figure out how I can have multiple vertical levels (like Doom)
_________________________________________________________________________________________________________________________________________________________________________________________________

5 November 2022
I didn't accomplish too much today as I'm particularly tired on this rainy Saturday. By following the tutorial, I was able to fix the fisheye effect of the camera by adjusting the size of each
column height by the cosine of the difference of the ray cone angle and the player face angle. This ensures every column within the player's viewport is treated as equidistant from the camera.
In addition, I created a function to load textures from a file using a (rather big) header file as a library called "stb_image.h" taken from the tutorial. This allows for the mapping of the
file values to a packed texture. My TODO points haven't changed from the last entry on November 1st. Hopefully I will be able to continue to consistently work on this project. One point that I
would like to note is, assuming window creation for the game is done using OS API, how is this done across different operating systems, i.e. Windows vs Linux?
_________________________________________________________________________________________________________________________________________________________________________________________________

16 November 2022
Jeez it's been a while. Time to get back to work.
Today I spent time learning how to draw textures on the map blocks. This was done by taking the texture that was loaded in, iterating over the pixels of the desired column that the ray hit, and
drawing those pixels to the framebuffer. The concept is quite simple but it requires considerable effort to code, especially in a low-level language like C++. The code speaks louder than
anything I can write here, so go check it out for more description. I was able to successfully draw textures to my walls and this was visualized in a .ppm file as usual.

TODO:
-Be able to move around
-Add entities to the world
-Run in a playable window
_________________________________________________________________________________________________________________________________________________________________________________________________